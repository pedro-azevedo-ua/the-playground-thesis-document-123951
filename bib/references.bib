`@report{3gpp.22.101,
  author = "3GPP",
  title = "{Service aspects; Service principles}",
  type = "TS",
  institution = "{3rd Generation Partnership Project (3GPP)}",
  number = "{22.101}",
  days = 24,
  month=sep.,
  year = 2008,
  url = "http://www.3gpp.org/ftp/Specs/html-info/22101.htm",
}

@misc{ticha,
title = {Ticha Penicheiro no Women's Basketball Hall of Fame},
url = {https://www.fpb.pt/noticia/ticha-penicheiro-no-womens-basketball-hall-of-fame-2/}
}

@misc{neemias,
title = {«É um bom momento para o basquetebol em Portugal, queremos mais espaço» | MAISFUTEBOL},
url = {https://maisfutebol.iol.pt/basquetebol/selecao/e-um-bom-momento-para-o-basquetebol-em-portugal-queremos-mais-espaco}
}

@misc{fiba,
title = {FIBA World Ranking for Men presented by NIKE- FIBA Basketball},
url = {https://www.fiba.basketball/en/ranking/men}
}

@misc{statcount,
title = {Mobile Operating System Market Share Portugal | Statcounter Global Stats},
url = {https://gs.statcounter.com/os-market-share/mobile/portugal#mobile_os_combined-PT-#yearly-2009-2025-bar}
}

@article{Khachouch2020,
    abstract = {Mobile applications development is complex. In order to build mobile apps that target all users, developers must put up with all the existing operating systems, software development kits (SDKs), devices various screen resolutions and existing mobile app development technology that is in constant evolution. And if this is not enough, developers must choose the right approach to build their app. Taking those decisions has a huge impact on the eventual cost, time, and success of an application building. In order of importance, it comes right after choosing the functionality of the app itself. If developers fail to match an app demands to the right development approach, it can turn their project into a certain failure. This paper aims to compare between the mobile app development approaches and suggest a decisional framework to choose between them.},
    author = {Mohamed Karim Khachouch and Ayoub Korchi and Younes Lakhrissi and Anis Moumen},
    doi = {10.1109/ICECCE49384.2020.9179434},
    isbn = {9781728171166},
    journal = {2nd International Conference on Electrical, Communication and Computer Engineering, ICECCE 2020},
    keywords = {cross-platform,development approaches,mobile development},
    month = {6},
    publisher = {Institute of Electrical and Electronics Engineers Inc.},
    title = {Framework Choice Criteria for Mobile Application Development},
    year = {2020}
}


@book{Nagy2022,
    abstract = {Explore the new Kotlin Multiplatform to build native apps for Android and iOS while sharing business logic between apps Key Features Improve app development speed dramatically by writing the business logic in Kotlin Implement a native user interface and work with platform-specific APIs Leverage Kotlin Multiplatform Mobile's code-sharing capabilities for your projects Book Description Sharing code between platforms can help developers gain a competitive edge, and Kotlin Multiplatform Mobile (KMM) offers a sensible way to do it. KMM helps mobile teams share code between Android and iOS in a flexible way, leaving room for native development. The book begins by helping you to gain a clear understanding of the Kotlin Multiplatform approach, how it works, and how it is different from cross-platform technologies, such as React Native and Flutter, and code sharing options, such as C++. You'll then see how your team can use this software development kit (SDK) to build native applications more effectively by learning timeless concepts and working through practical examples. As you advance, you'll get to grips with the core concepts, understand why UI sharing fails, and get hands-on with developing a small KMM application. Finally, you'll discover expert tips and best practices, along with production- and adoption-related questions, that will help you take the next step in your project and career. By the end of this Kotlin book, you'll have gained a solid understanding of the capabilities of KMM and be able to share code between Android and iOS flexibly. What you will learn Get acquainted with the multiplatform approach and KMM's competitive edge Understand how Kotlin Multiplatform works under the hood Get up and running with the Kotlin language quickly in the context of Swift Find out how to share code between Android and iOS Explore tips and best practices in KMM to increase app development efficiency Discover adoption tips to integrate KMM into existing or new production apps Who this book is for This book is for native Android and iOS developers who want to build high-quality apps using an efficient development process. Knowledge of the framework and the languages used is necessary, that is, Android with Java or Kotlin and iOS with Objective-C or Swift. For Swift developers, the book assumes no knowledge of Kotlin as this will be covered in the context of Swift.},
    author = {Robert. Nagy},
    isbn = {9781801819657},
    pages = {184},
    title = {Simplifying Application Development with Kotlin Multiplatform Mobile : Write Robust Native Applications for IOS and Android Efficiently},
    year = {2022}
}

@article{Huber2021,
    abstract = {Developing the same mobile app for multiple platforms is a prominent challenge for practitioners in mobile software development. When starting an app project, practitioners are faced with a plethora of development approaches to choose from. Progressive Web Apps (PWAs) are a novel and promising approach for mobile cross-platform development (MCPD). As mobile devices are limited regarding battery capacity, the energy footprint of a mobile app should be kept as low as possible. Thus, the aim of this study is to analyze the difference in energy consumption of PWAs and other mobile development approaches with a focus on UI rendering and interaction scenarios. For this, we implemented five versions of the same app with different development approaches and examined their energy footprint on two Android devices with four execution scenarios. The results show that the used development approach influences the energy footprint of a mobile app. Native development shows the lowest energy consumption. PWAs, albeit not the lowest energy consuming mobile development approach, are a viable alternative to other MCPD approaches. Moreover, the web-browser engine used to execute the PWA has a significant influence on the energy footprint of the app. © 2021, Springer Nature Switzerland AG.},
    author = {Stefan Huber and Lukas Demetz and Michael Felderer},
    doi = {10.1007/978-3-030-74296-6_35},
    isbn = {9783030742959},
    issn = {16113349},
    journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
    keywords = {Mobile app energy efficiency,Mobile cross-platform development,Mobile web engineering,Progressive web apps},
    pages = {464-479},
    publisher = {Springer Science and Business Media Deutschland GmbH},
    title = {PWA vs the Others: A Comparative Study on the UI Energy-Efficiency of Progressive Web Apps},
    volume = {12706 LNCS},
    url = {https://www.scopus.com/pages/publications/85111163302?origin=resultslist},
    year = {2021}
}

@article{Gerges2024,
    abstract = {Growing use of the cell phones and tablets over the computer for humans’ daily life has increased the development of mobile apps. Different paradigms have been introduced to develop a mobile app. Up till now, the major paradigms have been introduced are native apps, hybrid apps, web app and the new trend namely progressive web app (PWA). Each methodology has its pros and cons. This paper discusses about native development issues and how web app aimed to solve these problems. The hybrid apps will be discussed as a solution of cross-platform development problem of native apps.  In addition, problems of web apps and the gap between web app and native apps will be introduced. PWA is supposed to bridge the gap between native apps and web apps. The main technologies –service worker- will also be discussed.  },
    author = {Maher Gerges and Ahmed Elgalb},
    doi = {10.60087/JAIGS.V6I1.269},
    issn = {3006-4023},
    issue = {1},
    journal = {Journal of Artificial Intelligence General science (JAIGS) ISSN:3006-4023},
    keywords = {Comparative Analysis,Cross,Development Approaches,Hybrid App Development,Native App Development,Platform Development,Progressive Web Apps (PWAs)},
    month = {12},
    pages = {430-437},
    publisher = {Open Knowledge},
    title = {Comprehensive Comparative Analysis of Mobile Apps Development Approaches},
    volume = {6},
    url = {https://newjaigs.org/index.php/JAIGS/article/view/269},
    year = {2024}
}

@article{ELKASSAS2017163,
    title = {Taxonomy of Cross-Platform Mobile Applications Development Approaches},
    journal = {Ain Shams Engineering Journal},
    volume = {8},
    number = {2},
    pages = {163-190},
    year = {2017},
    issn = {2090-4479},
    doi = {https://doi.org/10.1016/j.asej.2015.08.004},
    url = {https://www.sciencedirect.com/science/article/pii/S2090447915001276},
    author = {Wafaa S. El-Kassas and Bassem A. Abdullah and Ahmed H. Yousef and Ayman M. Wahba},
    keywords = {Cross-platform mobile development, Interpretation approach, Cloud computing, Compilation approach, Component-Based approach, Model-Driven Engineering},
    abstract = {The developers use the cross-platform mobile development solutions to develop the mobile application once and run it on many platforms. Many of these cross-platform solutions are still under research and development. Also, these solutions are based on different approaches such as Cross-Compilation approach, Virtual Machine approach, and Web-Based approach. There are many survey papers about the cross-platform mobile development solutions but they do not include the most recent approaches, including Component-Based approach, Cloud-Based approach, and Merged approach. The main aim of this paper is helping the researchers to know the most recent approaches and the open research issues. This paper surveys the existing cross-platform mobile development approaches and attempts to provide a global view: it thoroughly introduces a comprehensive categorization to the cross-platform approaches, defines the pros and cons of each approach, explains sample solutions per approach, compares the cross-platform mobile development solutions, and ends with the open research areas.}
}

@INPROCEEDINGS{10667693,
    author={Zou, Donglan and Darus, Mohamad Yusof},
    booktitle={2024 IEEE 6th Symposium on Computers & Informatics (ISCI)},
    title={A Comparative Analysis of Cross-Platform Mobile Development Frameworks},
    year={2024},
    volume={},
    number={},
    pages={84-90},
    keywords={Technological innovation;Navigation;Grasping;Programming;Mobile communication;Market research;Corona;Mobile Development Frameworks;Cross-platform Development;Framework Comparison},
    doi={10.1109/ISCI62787.2024.10667693}}

@article{Riaz2025,
    author = {Muhammad Usama Riaz},
    keywords = {113 Data,comparative analysis,cross,flutter,kotlin,mobiilipalvelut,mobile services,mobiltjänster,och informationsvetenskap,ohjelmointikielet,platform development,programmeringsspråk,programming languages,react native},
    title = {Comparative Analysis of React Native, Kotlin, and Flutter for Cross-Platform Mobile Development},
    url = {https://www.doria.fi/handle/10024/192774},
    year = {2025}
}

@misc{kmp,
    title = {Kotlin Multiplatform – Build Cross-Platform Apps},
    url = {https://www.jetbrains.com/kotlin-multiplatform/},
    author = {JetBrains}
}

@misc{compose-multi,
author = {JetBrains},
title = {Compose Multiplatform – Beautiful UIs Everywhere},
url = {https://www.jetbrains.com/compose-multiplatform/}
}

@misc{jetpack,
author = {Google},
title = {Jetpack Compose UI App Development Toolkit - Android Developers},
url = {https://developer.android.com/compose}
}

@misc{materialD,
author = {Google},
title = {Material Design 3 - Google's latest open source design system},
url = {https://m3.material.io/}
}

@book{kotlinInDepth,
    author     = {Carter, Thompson},
    year       = {2025},
    month      = {July},
    title      = {Kotlin Multiplatform Projects: Sharing Code Between Android, iOS, and the Web},
    publisher  = {Lincoln Publishers},
    note       = {Kotlin in Depth: Coroutines, Compose, and Multiplatform Apps for Android and Beyond}
}

%competitor research
@misc{aircourts,
title = {AirCourts - Reserva grátis 1,500 campos de Padel, Ténis e Futebol em Portugal},
url = {https://www.aircourts.com/}
}

@misc{playtonic,
title = {Join the community and book courts online in one app | Playtomic},
url = {https://playtomic.com/}
}

@misc{tiesports,
title = {Quem Somos - Tiesports},
url = {https://tiesports.com/quem-somos/}
}

@misc{meetup-basketball-group,
title = {Lisbon Basketball Club | Meetup},
url = {https://www.meetup.com/lisbon-basketball-meetup/}
}
@misc{meetup,
title = {Find Events \& Groups in Portugal},
url = {https://www.meetup.com/find/portugal/}
}

@misc{fiba-courts,
title = {Basketball Courts of the World – Courts of the World},
url = {https://www.courtsoftheworld.com/}
}

@misc{pickup,
title = {Pickup: Play \& Host Sports},
url = {https://www.pickupgames.app/}
}
@misc{pickup-app,
title = {Pickup: Play \& Host Sports Play Store},
url = {https://play.google.com/store/apps/details?id=com.testpickup.app}
}

@misc{globaltennis,
title = {Find a Tennis League in Portugal},
url = {https://www.globaltennisnetwork.com/tennis-leagues/leagues/country/171-portugal}
}

@misc{reddit,
    title = {Anywhere to play pickup basketball in Lisbon?},
    url = {https://www.reddit.com/r/lisboa/comments/qtokhf/anywhere_to_play_pickup_basketball_in_lisbon/}
}

@misc{worldBaller,
    title = {Pickup Basketball In Every City - Lisbon},
    url = {https://www.worldballer.com/europe/lisbon}
}

@misc{perplexity,
    title = {I am from Lisbon and I play basketball. I would like to go play on the weekend in a public court. Where can I go? Is there any platform I can find some casual games to join?},
    url = {https://www.perplexity.ai/search/i-am-from-lisbon-and-i-play-ba-8VmBq1GuQFGTna4LnR3VXg#0}
}
@misc{chatgpt1,
    title = {Lisbon basketball courts},
    url = {https://chatgpt.com/s/t_68ef91bd97b881918a2f64248073502a},
}
@misc{chatgpt2,
    title = {Lisbon basketball courts games},
    url = {https://chatgpt.com/s/t_68ef915fde548191a794cd0d4dbdbd67}
}
@misc{jogabasket,
    title = {Lisbon basketball courts games},
    url = {http://www.jogabasket.pt/}
}

@misc{pickup-adult-app,
    title = {Pickup Sports Play Store},
    url = {https://play.google.com/store/apps/details?id=com.pickup.sports}
}

@misc{goodrec,
    title = {GoodRec},
    url = {https://play.google.com/store/apps/details?id=com.lewisblack.JustPlay}
}

@misc{woooba,
    title = {WOOBA},
    url = {https://play.google.com/store/apps/details?id=io.woooba}
}

@misc{pick-roll,
    title = {Pick-Roll},
    url = {https://play.google.com/store/apps/details?id=com.iperskill.pickroll}
}
@misc{fullcourt-pp,
    title = {Fullcourt: Pickup Basketball},
    url = {https://play.google.com/store/apps/details?id=com.fullcourt.fullcourt&hl=en}
}

@misc{pickup-adult,
    title = {Pickup Sports},
    url = {https://pickup-sports.com/},
}

@misc{fullcourt,
    title = {Fullcourt: Pickup Basketball},
    url = {https://www.50four.com/}
}

%%%%%%% Backend references

@inbook{DeCarli2023,
    abstract = {Firebase is a Cloud-hosted, NoSQL database that uses a document-model. It can be horizontally scaled while letting you store and synchronize data in real-time among users. This is great for applications that are used across multiple devices such as mobile applications. Firebase is optimized for offline use with strong user-based security that allows for serverless based apps as well. Firebase is built on the Google infrastructure and is built to scale automatically. In addition to standard NoSQL database functionality, Firebase includes analytics, authentication, performance monitoring, messaging, crash reporting and much more. Because it is a Google product, there is also integration into a lot of other products. This includes integration with Google Ads, AdMob, Google Marketing Platform, the Play Store, Data Studio, BigQuery, Slack, Jira, and more. The Firebase APIs are packaged into a single SDK that can be expanded to multiple platforms and languages. This includes C++ and Unity, which are both popular for mobile development.},
    author = {Sullivan De Carli},
    doi = {10.1007/978-1-4842-9452-9_2},
    booktitle = {Build Mobile Apps with SwiftUI and Firebase},
    pages = {17-42},
    publisher = {Apress},
    title = {Introduction to Firebase},
    url = {https://learning.oreilly.com/library/view/build-mobile-apps/9781484294529/html/533376_1_En_2_Chapter.xhtml},
    year = {2023}
}

@inproceedings{inproceedings,
    author = {Kuo, Jen-Hao and Ruan, He-Ming and Chan, Chun-Yi and Lei, Chin-Laung},
    year = {2017},
    month = {10},
    pages = {1-6},
    title = {Investigation of mobile App behaviors, from the aspect of real world mobile backend system},
    doi = {10.1109/AEECT.2017.8257762}
}

@article{saraf2022,
    abstract = {Abstract: If we see current scenario mobile users are rapidly increasing in a very large scale. Better performance and good visuals are needed while developing any mobile applications. In the current mobile market, there are various operating system which are supported by many mobile devices. . Since these platforms have different SDKs and tools for developing mobile applications, SDK tools will include a range of things, including libraries, documentation, code samples, processes, and different guides that developers can use and integrate/combined into their own apps. Cross platform development offers the flexibility for building applications using universal language like Javascript which can then be exported to numerous smartphone platforms. Firebase is a platform for mobile and web application with tools and infrastructure which allows developers to build high quality applications. Firebase consists of features that developers can use together to meet their needs. Earlier Firebase was used as a real-time database, which provides developers an API to sync and store data across various clients. Over time, it’s product has been expanded to become a full suite for an app development. Day by day new platform approaches are evolved. Firebase is also powerful API i.e Application Program Interface to sync and store data in realtime helping to build realtime apps for the web. It also takes care of most of the backend concerns and is dubbed a Backend as a Service (BaaS) and also pushes state to your application utilizing web sockets. Keywords: Android, iOS, Cross Platform Development, Flutter, Dart, Widgets, Firebase.},
    author = {Prachi R. Saraf},
    doi = {10.22214/IJRASET.2022.39958},
    issue = {1},
    journal = {International Journal for Research in Applied Science and Engineering Technology},
    month = {1},
    pages = {967-971},
    publisher = {International Journal for Research in Applied Science and Engineering Technology (IJRASET)},
    title = {A Review on Firebase (Backend as A Service) for Mobile Application Development},
    volume = {10},
    year = {2022}
}

@misc{firebaseGoogle,
    title = {Firebase},
    url = {https://firebase.google.com/}
}

@book{Yahiaoui2017,
    author = {Houssen Yahiaoui},
    isbn = {1788296338},
    month = {11},
    publisher = {Packt Publishing},
    title = {Firebase Cookbook: Over 70 recipes to help you create real-time web and ... - Houssem Yahiaoui - Google Livros},
    url = {https://learning.oreilly.com/library/view/firebase-cookbook/9781788296335/21bb0838-e9e6-4dbc-9568-dab0b57aa24d.xhtml},
    year = {2017}
}

@article{Shah_Jagtap_Jain_2025,
    title={Architecting Analytics-Driven Mobile Ecosystems: Scalable Backend Frameworks for Intelligent Data Flow and Real-Time User Insights},
    volume={6},
    url={https://ijaidsml.org/index.php/ijaidsml/article/view/148}, DOI={10.63282/3050-9262.IJAIDSML-V6I2P109},
    abstractNote={Exponential expansion in mobile apps and connected devices has produced mountains of data, which, in turn, require the creation of scalable and smart backend architectures. Such ecosystems need not only to provide real-time analytics but also to be capable of driving actionable insights to maximize user engagement and dynamic application performance. The architectural problem is creating backend systems that are robust, scalable, and smart enough to handle large data streams asynchronously with very little latency while ensuring consistency, reliability, and security. This paper introduces a layered, modular analytical model for analytics-instrumented mobile ecosystems that optimally gather, manipulate, and process data. Our architecture is for microservices, serverless functions, distributed databases, and edge computing components. We present a scalable and fault-tolerant architecture for modern mobile applications using AI/ML algorithms and real-time processing platforms for events like Apache Kafka, Apache Flink, and AWS Kinesis. We then continue to provide a comprehensive methodology of implementation that includes intelligent data pipelines, scalable data lakes, real-time dashboards, and user insight modules. Our prototype implementation is evaluated using latency, throughput, scalability, and predictive accuracy-based benchmarks. The results indicate a 47% increase in latency and a 60% improvement in throughput compared to traditional monolithic architectures when static mobile scenarios are used. In addition, we discuss how analytics feedback loops help facilitate smart decision-making through personalized recommendations, anomaly detection, and user churn prediction. Other issues with data governance, security, and compliance are identified in the paper and foreseen future improvements with federated learning and privacy-preserving analytics. This blueprint is for mobile backend architects and data engineers who want to develop intelligent, scalable, and real-time analytics ecosystems},
    number={2},
    journal={International Journal of Artificial Intelligence, Data Science, and Machine Learning},
    author={Shah, Rutvij and Jagtap, Shrinivas and Jain, Vishal},
    year={2025},
    month={Apr.},
    pages={83–91}
}

@article{offlineFirst1,
abstract = {Mobile chat applications used within intranet-based environments often struggle with inconsistent, unstable, or unavailable internet connectivity, causing interruptions that significantly impact the user's experience (communication). This paper introduces an offline-first architecture designed explicitly for Android-based chat systems operating on the intranet, such as those available on cruise ships. By integrating local data storage using Android's database (either Room or SQLite), innovative caching strategies, and optimized sync techniques, the approach proposed ensures stable, consistent, and smooth messaging even during extended periods without connectivity. We have implemented and thoroughly tested this solution in simulated intranet environments, confirming its reliability and stability in maintaining a reliable network for exchanging messages, minimizing sync conflicts, and delivering a smooth user experience. The results highlight clear benefits, making the architecture highly compatible with Android developers and aiming to improve application stability and performance in cases with limited or intermittent network availability. 1. Introduction Over the past decade, mobile chat applications have become integral to effective communication in many industries, including entertainment, hospitality, e-commerce, and corporate environments [5]. Typically, these chat applications depend on stable internet connections to provide smooth and real-time messaging capabilities [6]. However, consistent internet connectivity isn't always guaranteed, particularly in intranet-based or isolated environments like cruise ships, remote sites, or event venues [7]. When connectivity is limited or disrupted, conventional chat systems struggle to maintain reliable service, resulting in user frustration and operational inefficiencies [8]. To overcome these limitations, an offline-first architecture has become essential. Unlike traditional applications, offline-first solutions prioritize local data storage and functionality, allowing apps to operate seamlessly even without active internet connections. Once connectivity resumes, stored data is synchronized with backend servers, maintaining consistency and continuity [9]. Android, the dominant mobile operating system globally, offers tools and libraries-such as Room Database for local data persistence [2] and WorkManager for background synchronization [10]-which effectively support offline-first design. In this paper, we describe the implementation of an offline-first architecture tailored explicitly for Android-based chat applications operating within closed intranet environments. Our approach utilizes locally cached data, efficient message queuing, and optimized synchronization algorithms, ensuring uninterrupted messaging capability irrespective of external network conditions [3] .},
author = {Varun Reddy Guda},
doi = {10.54660/.IJMRGE.2025.6.3.1200-1203},
issn = {2582-7138},
keywords = {Android Application,Intranet-Based Chat,Limited Connectivity,Local Caching,Offline-First Architecture,Room Database,Synchronization Algorithms},
title = {Implementation of Offline-First Architectures for Android Internet-Based Chat Systems},
url = {www.allmultidisciplinaryjournal.com}
}

@misc{offlineFirstAndroid,
title = {Build an offline-first app, App architecture, Android Developers},
url = {https://developer.android.com/topic/architecture/data-layer/offline-first}
}

@misc{room,
    author = {{Android Developers}},
    title = {Save data in a local database using Room},
    year = {2025},
    month = {October},
    url = {https://developer.android.com/training/data-storage/room},
    note = {Android Jetpack Documentation}
}

@misc{datastore,
title = {App Architecture: Data Layer - DataStore - Android Developers},
url = {https://developer.android.com/topic/libraries/architecture/datastore}
}

@article{chiriac2025nosql,
abstract = {The aim of this article is to show the advantages of No-SQL databases compared to SQL (relational) databases. Traditionally, the concept of database is implicitly associated with relational databases, most often ignoring the huge potential that non-relational databases have in the fields such as BigData, Data Analysis, Artificial Intelligence. Besides, non-relational databases are also remarkable for their structure flexibility, their speed and for the distribution of their data on multiple servers simultaneously, for their fast writing and reading speed, which is crucial when analysing very large volumes of data.},
author = {Mario-Tudor Chiriac},
journal = {Database Systems Journal},
keywords = {No-SQL,No-SQL databases,Relational databases,SQL,SQL databases,efficiency,large,non-relational databases,portability,redundancy,scalability},
pages = {2025},
title = {The Advantage of NoSQL Databases over SQL Databases},
volume = {XVI}
}


@article{Kot2023,
    abstract = {The article presents a performance analysis of Firebase cloud database. Two services, namely Realtime Database and Cloud Firestore, are examined, and their query speed are compared to those of the local SQLite database. Basic CRUD operations were examined, taking into account the number of records in the database, the size of individual records and the complexity of the database structure. Upon completion of the research, it was concluded that Realtime Database outperforms Cloud Firestore and cloud databases are slower than the local database when it comes to operations on a single record. However, when working with a larger volume of data, cloud database can achieve better results than SQLite. The accuracy of the outcome is also influenced by the stability of the network connection and the distance from the cloud server.},
    author = {Sylwester Kot and Jakub Smołka},
    doi = {10.35784/JCSI.3798},
    journal = {Journal of Computer Sciences Institute},
    month = {12},
    pages = {360-365},
    publisher = {Politechnika Lubelska},
    title = {performance analysis of a cloud database on mobile devices},
    volume = {29},
    url = {https://www.researchgate.net/publication/376965742_performance_analysis_of_a_cloud_database_on_mobile_devices},
    year = {2023}
}

@misc{redis,
    author = {Redis},
    title = {Redis},
    year = {2025},
    month = {October},
    url = {https://redis.io/},
    note = {Redis Documentation}
}

@misc{SQLite,
    author = {SQLite},
    title = {SQLite},
    year = {2025},
    month = {October},
    url = {https://www.sqlite.org/},
    note = {SQLite Documentation}
}
@misc{postgresql,
    author = {PostgreSQL},
    title = {PostgreSQL},
    year = {2025},
    month = {October},
    url = {https://www.postgresql.org/},
    note = {PostgreSQL Documentation}
}
@misc{mysql,
    author = {MySQL},
    title = {MySQL},
    year = {2025},
    month = {October},
    url = {https://www.mysql.com/},
    note = {MySQL Documentation}
}

@misc{realm,
    author = {MongoDB Realm},
    title = {MongoDB Realm},
    year = {2025},
    month = {October},
    url = {https://realm.netlify.app/},
    note = {MongoDB Realm Documentation}
}
@misc{mongo,
    author = {MongoDB },
    title = {MongoDB },
    year = {2025},
    month = {October},
    url = {https://www.mongodb.com/},
    note = {MongoDB Documentation}
}

@misc{coreData,
    author = {{Apple Developer}},
    title = {Core Data},
    year = {2025},
    month = {October},
    url = {https://developer.apple.com/documentation/coredata/},
    note = {Core Data Documentation}
}



@article{Taipalus2024,
    abstract = {Efficiency has been a pivotal aspect of the software industry since its inception, as a system that serves the end-user fast, and the service provider cost-efficiently benefits all parties. A database management system (DBMS) is an integral part of effectively all software systems, and therefore it is logical that different studies have compared the performance of different DBMSs in hopes of finding the most efficient one. This study systematically synthesizes the results and approaches of studies that compare DBMS performance and provides recommendations for industry and research. The results show that performance is usually tested in a way that does not reflect real-world use cases, and that tests are typically reported in insufficient detail for replication or for drawing conclusions from the stated results.},
    author = {Toni Taipalus},
    doi = {10.1016/J.JSS.2023.111872},
    issn = {0164-1212},
    journal = {Journal of Systems and Software},
    keywords = {Comparison,Database,Database management system,NewSQL,NoSQL,Performance,Relational database},
    month = {2},
    pages = {111872},
    publisher = {Elsevier},
    title = {Database management system performance comparisons: A systematic literature review},
    volume = {208},
    url = {https://www.sciencedirect.com/science/article/pii/S0164121223002674},
    year = {2024}
}

@article{mccormick,
    abstract = {As Internet-enabled devices become more prevalent in the form of smartphones and tablets, the need for mobile application development patterns grows in importance. Different technologies, such as Nokia's Symbian, Apple's iOS, Google's Android, and Microsoft's Windows Mobile, have arisen and will continue evolving to provide platforms for developing mobile device applications. These technologies build on years of experience developing flexible, open-ended frameworks and platforms, and the developers of these technologies have provided many resources for application developers. While best practices have been documented for nearly every component, such as the guidelines for Android Design i and the iOS App Programming Guide ii , a comprehensive pattern collection or pattern language for mobile application development has not yet been produced. This gap exacerbates the difficulty of solving problems or conveying solutions effectively in this domain.},
    author = {Zach Mccormick and Douglas C Schmidt},
    keywords = {D211 [Software Engineering]: Software Architectures-Patterns; C24 [Computer-Communication Networks]: Distributed Systems-Client/Server General Terms: Data Synchronization Additional Key Words and Phrases: mobile applications,client/server,multi-dimensional concerns ACM Reference Format:},
    title = {Data Synchronization Patterns in Mobile Application Design, proceedings of the Pattern Languages of Programs (PLoP) 2012 conference}
}

@misc{workmanager,
    author = {{Android}},
    title = {Task Scheduling},
    year = {2025},
    month = {October},
    url = {https://developer.android.com/develop/background-work/background-tasks/persistent},
    note = {Work Manager}
}

@misc{iosbackgroundtasks,
    author = {Apple Developer},
    title = {Background Tasks},
    year = {2025},
    month = {October},
    url = {https://developer.apple.com/documentation/backgroundtasks},
    note = {Background Tasks docs}
}

%%%Firebase services

@misc{firebasefunctions,
    author = {{Google Firebase}},
    title = {Cloud Functions},
    year = {2025},
    month = {October},
    url = {https://firebase.google.com/docs/functions},
    note = {Firebase Documentation}
}
@misc{firestore2025,
    author = {{Google Firebase}},
    title = {Cloud Firestore},
    year = {2025},
    month = {October},
    url = {https://firebase.google.com/docs/firestore},
    note = {Firebase Documentation}
}

@misc{firebaseRealtime2025,
    author = {{Google Firebase}},
    title = {Firebase Realtime Database},
    year = {2025},
    month = {October},
    url = {https://firebase.google.com/docs/database},
    note = {Firebase Documentation}
}

@misc{emulatorSuite,
    author = {{Google Firebase}},
    title = {Local Emulator Suite},
    year = {2025},
    month = {October},
    url = {https://firebase.google.com/docs/emulator-suite},
    note = {Firebase Documentation}
}

@misc{firebaseAuthentication,
    author = {{Google Firebase}},
    title = {Authentication},
    year = {2025},
    month = {October},
    url = {https://firebase.google.com/docs/auth},
    note = {Firebase Documentation}
}
@misc{firebaseDataConnect,
    author = {{Google Firebase}},
    title = {Data Connect},
    year = {2025},
    month = {October},
    url = {https://firebase.google.com/docs/data-connect},
    note = {Firebase Documentation}
}

@misc{firebaseRules,
    author = {{Google Firebase}},
    title = {Security Rules},
    year = {2025},
    month = {October},
    url = {https://firebase.google.com/docs/rules},
    note = {Firebase Documentation}
}
@misc{firebaseAppCheck,
    author = {{Google Firebase}},
    title = {App Check},
    year = {2025},
    month = {October},
    url = {https://firebase.google.com/docs/app-check},
    note = {Firebase Documentation}
}

@misc{firebaseMsg,
    author = {{Google Firebase}},
    title = {Cloud Messaging},
    year = {2025},
    month = {October},
    url = {https://firebase.google.com/docs/cloud-messaging},
    note = {Firebase Documentation}
}
@misc{firebaseOverview,
    author = {{Google Firebase}},
    title = {Learn about products to help you RUN your app },
    year = {2025},
    month = {October},
    url = {https://firebase.google.com/docs/run},
    note = {Firebase Documentation}
}

@article{ZewdieAyezabu2022,
    author = {Amanuel Zewdie Ayezabu},
    keywords = {firebase,pwa,supabase,web development},
    title = {Ayezabu Amanuel Supabase vs Firebase: Evaluation of performance and development of Progressive Web Apps},
    year = {2022}
}

@article{denys,
abstract = {The impact of integrating Stripe, Firebase and OpenAI in advanced API solutions, which is investigated in this research, is to optimize user experience (UX) in web and mobile applications. Based on a case study analysis of actual applications that have already adopted these APIs, the study uses empirical data collection, performance metrics analysis, and user feedback analysis to test whether these APIs are effective or not. Experiments are performed to analyze API integration, and the performance of the application before and after API integration is compared. The success rate of transactions, data synchronization speed, and AI-powered engagement metrics were used as KPIs to measure the impact on UX. To complete the evaluation, data was gathered from application logs, user interaction reports and developer insights. The study defines UX optimization as loading speed, ease of navigation, transaction speed, real-time responsiveness, and engagement levels. According to our results, Stripe reduces the checkout abandonment rate by 40% and improves the transaction success rate by 30%, thereby boosting user trust in transactions as well as transaction efficiency in terms of finance. This cuts down around 70% for data synchronization latency, which gives for a smoother app experience and better retention rates. The AI models from Open AI enhance the session times by 25-40% and grow engagement by virtue of engaging the user better with a more personalized experience for the user. Science verifies the particular advantages of integrating API, including latency reduction, improved interactivity, and speed of application processes. All of these are highlighted as integration challenges in the research, as well as the best practices for future API implementations. This study is a good start to suggest ways of optimizing UX with the adoption of APIs.},
author = {Denys Drofa},
doi = {10.47191/ijcsrr/V8-i5-16},
issn = {2581-8341},
keywords = {API Integration,Advanced API Solutions,Performance Metrics,User Experience Optimization,Web and},
title = {International Journal of Current Science Research and Review Integrating Advanced API Solutions into Full-Stack Web and Mobile Applications to Optimise User Experience},
url = {www.ijcsrr.org}
}

%Supabase
@misc{supabase,
title = {Supabase},
    url = {https://supabase.com/}
}

@misc{supabaseAuth,
    author = {{Supabase}},
    title = {Auth},
    year = {2025},
    month = {October},
    url = {https://supabase.com/docs/guides/auth},
    note = {Supabase Documentation}
}

@misc{supabaseStorage,
    author = {{Supabase}},
    title = {Storage},
    year = {2025},
    month = {October},
    url = {https://supabase.com/docs/guides/storage},
    note = {Supabase Documentation}
}
@misc{supabaseEdge,
    author = {{Supabase}},
    title = {Edge Funtions},
    year = {2025},
    month = {October},
    url = {https://supabase.com/docs/guides/functions},
    note = {Supabase Documentation}
}
@misc{supabaseRealtime,
    author = {{Supabase}},
    title = {Realtime},
    year = {2025},
    month = {October},
    url = {https://supabase.com/docs/guides/realtime},
    note = {Supabase Documentation}
}






